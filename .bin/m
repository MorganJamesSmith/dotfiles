#!/bin/sh
#Asynchronously sync all your mailboxes. I set my mail up using Luke Smith's (LukeSmith.xyz) mutt-wizard

#Starts refreshing each mailbox in its own subshell
#Creates an "array" of pids (pid0, pid1, pid2 ...)
#Creates an "array" of account names (pid0, pid1, pid2 ...)
#Creates files in ~/.mailstatus<ACCOUNT NAME> with the exit value of the sync command
mail_refresh(){
	i=0;
	accounts=$(ls "$HOME/.local/share/mail");
	for account in $accounts;
	do (mbsync "$account" > /dev/null 2>&1; eval echo $? > "$HOME/.mailstatus$account" ) &
			eval pid$i="$!"; #create an "array" of pids
			eval account$i="$account"; #create an "array" of account names
			i=$((i+1));
	done;
}

#Waits for each pid in the pid "array" to finish
#Checks the status of each return
#Appends any failed accounts to an error message
wait_for_finish(){
	j=0;
	while [ $j -lt $i ]
	do eval wait "$"pid$j # The first $ is in quotes so shellcheck doesn't complain that I havent initilized pid
		eval acc='$'"account$j" #grab current account name
		read -r exitvalue < "$HOME/.mailstatus${acc:?}"
		rm "$HOME/.mailstatus$acc"
		if [ "$exitvalue" -ne 0 ]
		then
			if [ -z "$error" ]
			then
				error=" - errors occured in account(s): $acc"
			else error="$error, $acc"
			fi
		fi
		j=$((j+1));
	done;
}

if [ -e "$HOME/.mailisupdating" ]
then
	read -r oldtime < "$HOME/.mailisupdating"
	if [ "$oldtime" -le "$(( $(date +%s) - 2000 ))" ]
	then
		echo "Removing outdated lock file"
		rm "$HOME/.mailisupdating"
	else
		echo "Mail is already updating"
		if [ ! "$1" = "-q" ]
		then
			notify-send "Mail is already updating";
		fi
		exit 1
	fi
fi
date +%s > "$HOME/.mailisupdating"


mail_refresh;
wait_for_finish;
echo "Mail Updated$error";

rm "$HOME/.mailisupdating"

if [ -z "$error" ]
then
	exit 0
else
	exit 1
fi

